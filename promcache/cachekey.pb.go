// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cachekey.proto

/*
	Package promcache is a generated protocol buffer package.

	It is generated from these files:
		cachekey.proto

	It has these top-level messages:
		CacheKey
*/
package promcache

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CacheKey struct {
	Func       string `protobuf:"bytes,1,opt,name=Func,proto3" json:"Func,omitempty"`
	Query      string `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	Start      int64  `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	BucketSize int64  `protobuf:"varint,4,opt,name=BucketSize,proto3" json:"BucketSize,omitempty"`
	StepOffset int64  `protobuf:"varint,5,opt,name=StepOffset,proto3" json:"StepOffset,omitempty"`
	StepSize   int64  `protobuf:"varint,6,opt,name=StepSize,proto3" json:"StepSize,omitempty"`
}

func (m *CacheKey) Reset()                    { *m = CacheKey{} }
func (m *CacheKey) String() string            { return proto.CompactTextString(m) }
func (*CacheKey) ProtoMessage()               {}
func (*CacheKey) Descriptor() ([]byte, []int) { return fileDescriptorCachekey, []int{0} }

func (m *CacheKey) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *CacheKey) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *CacheKey) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CacheKey) GetBucketSize() int64 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *CacheKey) GetStepOffset() int64 {
	if m != nil {
		return m.StepOffset
	}
	return 0
}

func (m *CacheKey) GetStepSize() int64 {
	if m != nil {
		return m.StepSize
	}
	return 0
}

func init() {
	proto.RegisterType((*CacheKey)(nil), "promcache.CacheKey")
}
func (m *CacheKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Func) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCachekey(dAtA, i, uint64(len(m.Func)))
		i += copy(dAtA[i:], m.Func)
	}
	if len(m.Query) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCachekey(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.Start != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCachekey(dAtA, i, uint64(m.Start))
	}
	if m.BucketSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCachekey(dAtA, i, uint64(m.BucketSize))
	}
	if m.StepOffset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCachekey(dAtA, i, uint64(m.StepOffset))
	}
	if m.StepSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCachekey(dAtA, i, uint64(m.StepSize))
	}
	return i, nil
}

func encodeFixed64Cachekey(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cachekey(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCachekey(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CacheKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Func)
	if l > 0 {
		n += 1 + l + sovCachekey(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovCachekey(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovCachekey(uint64(m.Start))
	}
	if m.BucketSize != 0 {
		n += 1 + sovCachekey(uint64(m.BucketSize))
	}
	if m.StepOffset != 0 {
		n += 1 + sovCachekey(uint64(m.StepOffset))
	}
	if m.StepSize != 0 {
		n += 1 + sovCachekey(uint64(m.StepSize))
	}
	return n
}

func sovCachekey(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCachekey(x uint64) (n int) {
	return sovCachekey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CacheKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachekey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Func", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachekey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Func = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachekey
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketSize", wireType)
			}
			m.BucketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BucketSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepOffset", wireType)
			}
			m.StepOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepSize", wireType)
			}
			m.StepSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCachekey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCachekey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCachekey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCachekey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachekey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCachekey
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCachekey
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCachekey(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCachekey = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCachekey   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cachekey.proto", fileDescriptorCachekey) }

var fileDescriptorCachekey = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4e, 0x4c, 0xce,
	0x48, 0xcd, 0x4e, 0xad, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0x28, 0xca, 0xcf,
	0x05, 0x8b, 0x29, 0x2d, 0x63, 0xe4, 0xe2, 0x70, 0x06, 0xb1, 0xbc, 0x53, 0x2b, 0x85, 0x84, 0xb8,
	0x58, 0xdc, 0x4a, 0xf3, 0x92, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x11,
	0x2e, 0xd6, 0xc0, 0xd2, 0xd4, 0xa2, 0x4a, 0x09, 0x26, 0xb0, 0x20, 0x84, 0x03, 0x12, 0x0d, 0x2e,
	0x49, 0x2c, 0x2a, 0x91, 0x60, 0x56, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0x70, 0x84, 0xe4, 0xb8, 0xb8,
	0x9c, 0x4a, 0x93, 0xb3, 0x53, 0x4b, 0x82, 0x33, 0xab, 0x52, 0x25, 0x58, 0xc0, 0x52, 0x48, 0x22,
	0x20, 0xf9, 0xe0, 0x92, 0xd4, 0x02, 0xff, 0xb4, 0xb4, 0xe2, 0xd4, 0x12, 0x09, 0x56, 0x88, 0x3c,
	0x42, 0x44, 0x48, 0x8a, 0x8b, 0x03, 0xc4, 0x03, 0xeb, 0x66, 0x03, 0xcb, 0xc2, 0xf9, 0x4e, 0x02,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72,
	0x0c, 0x49, 0x6c, 0x60, 0xcf, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x10, 0xe4, 0xd6,
	0xde, 0x00, 0x00, 0x00,
}
